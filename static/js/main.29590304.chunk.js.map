{"version":3,"sources":["Search.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Search","className","Button","variant","Home","to","Avatar","src","alt","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8XAyBeA,EAnBA,WACX,OACI,oCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,iBACX,kBAAC,IAAD,CAAaA,UAAU,sBACvB,gCACA,kBAAC,IAAD,OAGJ,yBAAKA,UAAU,mBACX,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAhB,cACA,kBAACD,EAAA,EAAD,CAAQC,QAAQ,YAAhB,yBCmBLC,MA9Bf,WACI,OACI,yBAAKH,UAAU,QACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,CAAMI,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,yBAAKJ,UAAU,qBACX,kBAAC,IAAD,CAAMI,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,QAKR,yBAAKL,UAAU,cACX,yBAAKM,IAAI,gHAAgHC,IAAI,SAE7H,yBAAKP,UAAU,wBACX,kBAAC,EAAD,U,OCLLQ,MAlBf,WACI,OAEI,yBAAKR,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,KAAK,WACR,oDAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29590304.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Search.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Search = () => {\r\n    return (\r\n        <>\r\n            <div className=\"search\">\r\n                <div className=\"search__input\">\r\n                    <SearchIcon  className=\"search__inputIcon\"/>\r\n                    <input/>\r\n                    <MicIcon />\r\n                </div>\r\n\r\n                <div className=\"search__buttons\">\r\n                    <Button variant=\"outlined\"> Secondary</Button>\r\n                    <Button variant=\"outlined\">I'm Feeling Lucky</Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport './Home.css';\r\nimport {Link} from \"react-router-dom\";\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport {Avatar} from '@material-ui/core';\r\nimport Search from \"../Search\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"home__header\">\r\n                <div className=\"home__headerLeft\">\r\n                    <Link to=\"/about\">About</Link>\r\n                    <Link to=\"/store\">Store</Link>\r\n                </div>\r\n                <div className=\"home__headerRight\">\r\n                    <Link to=\"/gmail\">Gmail</Link>\r\n                    <Link to=\"/images\">Images</Link>\r\n                    <AppsIcon/>\r\n                    <Avatar/>\r\n                </div>\r\n            </div>\r\n            {/*home__header end*/}\r\n\r\n            <div className=\"home__body\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Google_2015_logo.svg/368px-Google_2015_logo.svg.png\" alt=\"Logo\"/>\r\n\r\n                <div className=\"home__inputContainer\">\r\n                    <Search/>\r\n                </div>\r\n            </div>\r\n            {/*Home Body end*/}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from \"./pages/Home\";\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nfunction App() {\n    return (\n\n        <div className=\"app\">\n            <Router>\n                <Switch>\n                    <Route path=\"/search\">\n                        <h1>This is search page</h1>\n                    </Route>\n                    <Route path=\"/\">\n                        <Home/>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}