{"version":3,"sources":["StateProvider.js","reducer.js","Search.js","pages/Home.js","useGoogleSearch.js","Keys.js","SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","term","Search","hideButtons","dispatch","useState","input","setInput","history","useHistory","search","e","preventDefault","push","className","onChange","target","Button","onClick","variant","Home","to","Avatar","src","alt","useGoogleSearch","data","setData","useEffect","fetch","then","response","json","result","SearchPage","searchInformation","formattedTotalResults","formattedSearchTime","items","map","item","href","link","pagemap","cse_image","length","displayLink","title","snippet","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b850e8b9.chunk.js","sourcesContent":["import React, {createContext, useContext, useReducer} from \"react\";\r\n\r\n\r\n// Preparing the data layer\r\nexport const StateContext = createContext();\r\n\r\n// Build A Provider\r\nexport const StateProvider = ({reducer, initialState, children}) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\n// Hook which allows us to pull information from the data layer\r\nexport const useStateValue = () => useContext(StateContext);","export const initialState = {\r\n   term: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n   SET_SEARCH_TERM: \"SET_SEARCH_TERM\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n   console.log(action);\r\n\r\n   switch(action.type){\r\n      case actionTypes.SET_SEARCH_TERM:\r\n         return {\r\n            ...state,\r\n            term: action.term,\r\n         };\r\n\r\n         default:\r\n            return state;\r\n   }\r\n};\r\n\r\nexport default reducer;","import React, {useState} from 'react';\r\nimport './Search.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useStateValue} from './StateProvider';\r\nimport {actionTypes} from './reducer';\r\n\r\n\r\nconst Search = ({hideButtons = false}) => {\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const [input, setInput] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    const search = (e) => {\r\n        e.preventDefault();\r\n\r\n        console.log(\"This is input value >>\", input);\r\n\r\n        dispatch({\r\n            type: actionTypes.SET_SEARCH_TERM,\r\n            term: input\r\n        });\r\n\r\n\r\n        history.push('/search');\r\n    };\r\n\r\n\r\n    return (\r\n        <form className=\"search\">\r\n            <div className=\"search__input\">\r\n                <SearchIcon className=\"search__inputIcon\"/>\r\n                <input value={input} onChange={e => setInput(e.target.value)}/>\r\n                <MicIcon/>\r\n            </div>\r\n            {!hideButtons ? (\r\n                <div className=\"search__buttons\">\r\n                    <Button onClick={search} type=\"submit\" variant=\"outlined\">Google Search</Button>\r\n                    <Button variant=\"outlined\">I'm Feeling Lucky</Button>\r\n                </div>\r\n            ) : (\r\n                <div className=\"search__buttons\">\r\n                    <Button className=\"input__hideButtons\" onClick={search} type=\"submit\" variant=\"outlined\">Google\r\n                        Search</Button>\r\n                    <Button className=\"input__hideButtons\" variant=\"outlined\">I'm Feeling Lucky</Button>\r\n                </div>\r\n            )}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport './Home.css';\r\nimport {Link} from \"react-router-dom\";\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport {Avatar} from '@material-ui/core';\r\nimport Search from \"../Search\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"home__header\">\r\n                <div className=\"home__headerLeft\">\r\n                    <Link to=\"/about\">About</Link>\r\n                    <Link to=\"/store\">Store</Link>\r\n                </div>\r\n                <div className=\"home__headerRight\">\r\n                    <Link to=\"/gmail\">Gmail</Link>\r\n                    <Link to=\"/images\">Images</Link>\r\n                    <AppsIcon/>\r\n                    <Avatar/>\r\n                </div>\r\n            </div>\r\n            {/*home__header end*/}\r\n\r\n            <div className=\"home__body\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Google_2015_logo.svg/368px-Google_2015_logo.svg.png\" alt=\"Google Logo\"/>\r\n\r\n                <div className=\"home__inputContainer\">\r\n                    <Search/>\r\n                </div>\r\n            </div>\r\n            {/*Home Body end*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import {useState, useEffect} from 'react';\r\nimport API_KEY from './Keys';\r\n\r\nconst CONTEXT_KEY = \"fa612e053742e9558\"; // Get this from: https://programmablesearchengine.google.com/cse/create/new\r\n\r\nconst useGoogleSearch = (term) => {\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = () => {\r\n            fetch(\r\n                `https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CONTEXT_KEY}&q=${term}` // Get this link from : https://developers.google.com/custom-search/v1/using_rest\r\n            )\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    setData(result)\r\n                });\r\n        }\r\n\r\n        fetchData();\r\n    }, [term]);\r\n\r\n    return {data}\r\n};\r\n\r\nexport default useGoogleSearch;","export const API_KEY=\"AIzaSyC69xK4g5OKLB3wVZ5BAzC0594DN1sh7A8\"; // Get this API key from: https://developers.google.com/custom-search/v1/overview?authuser=1\r\n\r\nexport default API_KEY;","import React from 'react';\r\nimport './SearchPage.css';\r\nimport {useStateValue} from \"./StateProvider\";\r\nimport useGoogleSearch from './useGoogleSearch';\r\nimport Response from \"./response\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Search from \"./Search\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst SearchPage = () => {\r\n    const [{term}, dispatch] = useStateValue();\r\n    // Live api call\r\n    const { data } = useGoogleSearch(term);\r\n\r\n    // Mock API Call\r\n    // const data = Response;\r\n\r\n    console.log(data);\r\n\r\n    return (\r\n        <div className=\"searchPage\">\r\n            <div className=\"searchPage__header\">\r\n                <Link to=\"/\">\r\n                    <img className=\"searchPage__Logo\"\r\n                         src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Google_2015_logo.svg/368px-Google_2015_logo.svg.png\"\r\n                         alt=\"Google Logo\"/>\r\n                </Link>\r\n\r\n                <div className=\"searchPage__headerBody\">\r\n                    <Search hideButtons/>\r\n\r\n                    <div className=\"searchPage__options\">\r\n                        <div className=\"searchPage__optionsLeft\">\r\n                            <div className=\"searchPage__option\">\r\n                                <SearchIcon/>\r\n                                <Link to=\"/all\">All</Link>\r\n                            </div>\r\n                            <div className=\"searchPage__option\">\r\n                                <DescriptionIcon/>\r\n                                <Link to=\"/news\">News</Link>\r\n                            </div>\r\n                            <div className=\"searchPage__option\">\r\n                                <ImageIcon/>\r\n                                <Link to=\"/images\">Images</Link>\r\n                            </div>\r\n                            <div className=\"searchPage__option\">\r\n                                <LocalOfferIcon/>\r\n                                <Link to=\"/shopping\">Shopping</Link>\r\n                            </div>\r\n                            <div className=\"searchPage__option\">\r\n                                <RoomIcon/>\r\n                                <Link to=\"/maps\">Maps</Link>\r\n                            </div>\r\n                            <div className=\"searchPage__option\">\r\n                                <MoreVertIcon/>\r\n                                <Link to=\"/more\">More</Link>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"searchPage__optionsRight\">\r\n                            <div className=\"searchPage__option\">\r\n                                <Link to=\"/settings\">Settings</Link>\r\n                            </div>\r\n                            <div className=\"searchPage__option\">\r\n                                <Link to=\"/tools\">Tools</Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {term && (\r\n                <div className=\"searchPage__results\">\r\n                    <p className=\"searchPage__resultCount\">\r\n                        About {data?.searchInformation.formattedTotalResults} results\r\n                        ({data?.searchInformation.formattedSearchTime} seconds) for {term}\r\n                    </p>\r\n\r\n                    {data?.items.map(item => (\r\n                        <div className=\"searchPage__result\">\r\n                            <a href={item.link}>\r\n                                {item.pagemap?.cse_image?.length > 0 && item.pagemap?.cse_image[0]?.src && (\r\n                                    <img\r\n                                    className=\"searchPage__ResultImage\"\r\n                                    src={item.pagemap?.cse_image?.length > 0 && item.pagemap?.cse_image[0]?.src}\r\n                                    alt=\"Search Image\"\r\n                                    />\r\n                                    )}\r\n                                {item.displayLink} &nabla;\r\n                            </a>\r\n\r\n                            <a className=\"searchPage__resultTitle\" href={item.link}>\r\n                                <h2>{item.title}</h2>\r\n                            </a>\r\n\r\n                            <p className=\"searchPage__resultSnippet\">\r\n                                {item.snippet}\r\n                            </p>\r\n                        </div>\r\n\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchPage;","import React from 'react';\nimport './App.css';\nimport Home from \"./pages/Home\";\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport SearchPage from \"./SearchPage\";\n\nfunction App() {\n    return (\n\n        <div className=\"app\">\n            <Router>\n                <Switch>\n                    <Route path=\"/search\">\n                        <SearchPage/>\n                    </Route>\n                    <Route path=\"/\">\n                        <Home/>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, {initialState} from './reducer';\nimport {StateProvider} from './StateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n        <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}